<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sean Dougherty]]></title>
  <link href="http://steam.github.io/atom.xml" rel="self"/>
  <link href="http://steam.github.io/"/>
  <updated>2014-06-07T13:34:00-05:00</updated>
  <id>http://steam.github.io/</id>
  <author>
    <name><![CDATA[Sean Dougherty]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WWDC 2014]]></title>
    <link href="http://steam.github.io/blog/2014/06/05/wwdc-2014/"/>
    <updated>2014-06-05T16:58:00-05:00</updated>
    <id>http://steam.github.io/blog/2014/06/05/wwdc-2014</id>
    <content type="html"><![CDATA[<p>Apple&rsquo;s annual World Wide Developers Conference was held in San Francisco over the past week. It turns out that 2014 was a great year for first time attendees like myself and my fellow iOS developer co-worker David Nix <a href="https://twitter.com/dave_nix">@dave_nix</a>. GoSpotCheck was lucky enough to get two tickets in the Apple lottery (at a pretty price of $1600 each) and graciously sent David and I to soak up all the new Apple goodness. Between the two of us we were able to attend a wide range of sessions and events. This post is a team effort. We have taken the time to compare notes and put together what we feel are the key takeaways from WWDC 2014.</p>

<h2>Developers! Developers! Developers!</h2>

<p>If WWDC 2013 was all about users, 2014 was all about developers. While iOS 8 and OS X 10.10 have lots of great new features for end users these pale in comparison to the sheer volume of new and improved tools Apple made available to their millions of iOS and Mac developers. The general opinion we heard around Moscone was excitement and approval. We couldn&rsquo;t agree more.</p>

<p>The biggest news for us (by far) was the introduction of a new programming language, Swift. Swift is a modern, concise, expressive and safe programming language that is the future of iOS and OS X applications. There was a collective gasp from 5000+ developers when Swift was announced at the keynote. The rest of the week was all excitement as one developer after another decided what a great addition Swift is to the Cocoa and Cocoa Touch communities.</p>

<h2>Big takeaways</h2>

<ul>
<li>This was the biggest WWDC for developers since 2008 (the introduction of the App Store for the iPhone 3G).</li>
<li>Swift is available in iOS 7 or greater so supporting iOS 6 is a no go. <strong>Hint: We really want to use Swift.</strong></li>
</ul>


<h4>A little taste of the goodness</h4>

<p>Lets loop through the range of 1&hellip;5 inclusive and print out some calculations on index</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">for</span> <span class="n">index</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="mf">.5</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(index) times 5 is \(index * 5)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Replace indexes 2, 3 and 4 in our friends array</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">friends</span><span class="p">[</span><span class="mf">2.</span><span class="p">.</span><span class="mf">.4</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;John&quot;</span><span class="p">,</span> <span class="s">&quot;Anna&quot;</span><span class="p">,</span> <span class="s">&quot;Henry&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Use a tuple to return multiple ages of our friends</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">func</span> <span class="nf">getAges</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="mi">28</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="p">(</span><span class="n">johnAge</span><span class="p">,</span> <span class="n">annaAge</span><span class="p">,</span> <span class="n">henryAge</span><span class="p">)</span> <span class="o">=</span> <span class="n">getAges</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is just a small taste of the compactness and expressiveness built into Swift. For a more detailed look into the language download &ldquo;The Swift Programming Language&rdquo; in iBooks.</p>

<ul>
<li>The new debugging features in Xcode are amazing.</li>
<li>Swift plays well with ObjC (and vice versa). An incredible feat by Apple.</li>
<li>Apple hates the &ldquo;hamburger&rdquo; menu, and we agree with them.</li>
<li>Remember, everything really cool in iOS 8 will (probably) not be usable with iOS 7.</li>
<li>Testflight will be integrated. No more device ids needed! Just apple ids. (It’s based on per user, not on per device.)</li>
<li>No more calculating tableview cell heights or collectionview cell sizes! (iOS 8 only though)</li>
<li>A lot of the new iOS 8 user-facing features are already present in Android. Whether or not Apple does this better than Android remains to be seen.</li>
<li>Xcode playgrounds are incredible. Totally changes the way we code in Swift (for the better). It&rsquo;s like irb or pry on steroids.</li>
<li>Apple is pushing for more interactive UI (think Facebook&rsquo;s Paper).</li>
<li>A big theme at the conference was adaptability. It is clear Apple is planning for more devices and potential screen dimensions. A lot of the new UIKit APIs are geared towards making application user interfaces work at any size. Becuase of this many of the explict references to iPad, iPhone and specific device orientations (portrait or landscape) are disappearing from the language. In their place are adaptive concepts that aim to communicate relative size such as &lsquo;regular height&rsquo; or &lsquo;compact width&rsquo;. They&rsquo;ve put a tremndous amount of effort into making adaptive layouts easier to create.</li>
<li>Continuity is anothe concept Apple reiterated. Allowing users to move from device to device picking up where they left off is going to set high quality apps apart.</li>
<li>Prototyping, or making <em>fake</em> apps is a crucial step in the process. Start with the most disposable possible version of an app idea. Use a pen and paper. Come up with lots of ideas. <strong>Throw most of them away.</strong> Build static, image based versions of the ones that seem promising. Show them to real users. <strong>Throw most of them away.</strong> Don&rsquo;t start building a time intensive <strong>real</strong> app until you have feedback on the fake app from real users. Hopefully this results in a better app, that real users want, with much less effort.</li>
</ul>


<h2>Opinion</h2>

<p>We&rsquo;re curious to see how fast Swift is compared to Objective C. Part of the joy of ObjC is that, even though it is verbose and &ldquo;ugly&rdquo;, you typically never have to worry about performance. It is very fast. It was stupid of Apple to compare Swift to Python in the main keynote. Python is an interpreted language, Swift is compiled. It&rsquo;s like comparing apples to oranges (pun intended). But Apple did have slides saying Swift is faster than ObjC. However, I (David) read an article, which I can&rsquo;t find now of course, that benchmarked Swift vs ObjC. The article claimed Swift was slower, sometimes by 200x or more. The author was doing things that probably wouldn&rsquo;t come up in most production apps (i.e. sorting millions of objects). However, only time will tell to see if Swift keeps on par with ObjC.</p>

<p>Swift combined with Xcode&rsquo;s new debugging features is going to boost programmer productivity significantly. It will give us more time to work on polished (nice to have) features like custom animations or custom UI.</p>

<p>ObjC won&rsquo;t be going anywhere for a while, but we might as well consider it legacy code. Swift is so much nicer to write. We can see Apple dropping ObjC in the next couple years. They often take an adapt or die methodology.</p>

<p>Several sessions dealt with user interfaces and how to approach designing them, both visual design and information design. Apple continuously reinforced the importance of <strong>clear</strong>, <strong>simple</strong> and <strong>focused</strong> design. An example of poor design, in Apple&rsquo;s opinion, is the hamburger button. Hamburger buttons interfere with the navigation back arrow, confusing the user. They also open drawers which tend to collect junk just like real drawers. Apple highly recommends tab bars instead of hamburger buttons. Even though tab bars take up screen real estate they greatly increase clarity and tend to get used much more often than hidden hamburger button navigation. We agree that hamburger buttons should go away in most cases.</p>

<p>Mature apps will need to be adaptive. This means having the appropriate content and sizing of that content at all size classes. This also means making our apps handle Adaptive Type, a system wide, user configured setting that dynamically changes the size of type throughout all apps.</p>

<h2>Technical Thoughts (targeted for programmers)</h2>

<p>Swift has no concept of public/private/protected. It will be the developer&rsquo;s job to clearly mark methods as public (via a comment) and to only use those methods publicly. However, Apple said access control will be coming to Swift in the future.</p>

<p>The ObjC feature of sending a message to nil and nothing happens has been great for the user in preventing crashes, but tough for the programmer when debugging during development. Swift does not have this feature. At first, we were scared this would lead to &ldquo;NullPointerExceptions&rdquo; that are common in Java. However, Swift uses Optional types to address this issue. An optional tells the compiler that a variable may or may not have a value. The compiler, then, is very strict about how you use these values. It also forces you to initialize every variable. You cannot initialize a non-optional variable to nil.</p>

<p>Swift has features very friendly to functional programming. We think we&rsquo;ll see more and more functional programming paradigms in iOS as time goes on.</p>

<p>Another quick taste of the functional power of Swift.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// this is not possible in Objective-C</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">number</span> <span class="k">in</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">number</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// but we can do better, we can shorten it even more</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">$0</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our summary of the announcements and sessions at WWDC 2014 would be incomplete without a list of highlights. Below are a few of the more significant changes to the tooling, API and end user facing components of iOS and OS X apps.</p>

<h2>Tooling Highlights</h2>

<ul>
<li><strong>Swift</strong> &ndash; a completely new programming language for writing iOS and OS X apps</li>
<li><strong>Swift REPL</strong> &ndash; a command line interactive shell for running Swift code (similar to irb for ruby)</li>
<li><strong>Playgrounds</strong> &ndash; realtime environments for trying out code</li>
<li><strong>View Debugging</strong> &ndash; visual debugging of views and their layout constraints</li>
<li><strong>Universal Storyboards</strong> &ndash; a single storyboard for all screen sizes</li>
<li><strong>Resizable Simulator</strong> &ndash; the iOS simulator can be resized to any size</li>
</ul>


<h2>API Highlights</h2>

<ul>
<li><strong>App Extensions</strong> &ndash; iOS system wide widgets accessible from other apps</li>
<li><strong>UITableView &amp; UICollectionView</strong> &ndash; automatic calculation of table and collection cell size</li>
<li><strong>Size Classes &amp; Trait Collections</strong> &ndash; device &amp; orientation independent handling of user interface size changes</li>
<li><strong>Rotation API deprecation</strong> &ndash; rotation events are deprecated, replaced by size classes</li>
<li><strong>CloudKit</strong> &ndash; structured, cloud based storage in iCloud</li>
<li><strong>SceneKit</strong> &ndash; simple 3D engine now available in iOS</li>
<li><strong>TouchID</strong> &ndash; applications can now access authentication through TouchID on iPhone 5s</li>
<li><strong>UIAlertController</strong> &ndash; Alert views and Action sheets are now full blown view controllers</li>
<li><strong>UISplitViewController</strong> &ndash; now availble on iPhone, one uniform controller for handling master/detail content</li>
<li><strong>HealthKit</strong> &ndash; a framework for managing personal health information</li>
<li><strong>HomeKit</strong> &ndash; a framework for communicating between home automation devices</li>
</ul>


<h2>End User Highlights</h2>

<ul>
<li><strong>iMessage</strong> &ndash; SMS is supported in all iMessage conversations</li>
<li><strong>Handoff</strong> &ndash; users can start an activity on one device and seemlessly transition it to another device</li>
<li><strong>iCloud storage</strong> &ndash; larger buckets of iCloud data can be purchased</li>
<li><strong>Document Picker</strong> &ndash; 3rd party cloud storage providers can offer access to all applications</li>
</ul>


<p>Disagree? Did we miss something? You can reach us both on twitter <a href="https://twitter.com/dave_nix">@dave_nix</a> or <a href="https://twitter.com/sdougherty">@sdougherty</a>. We&rsquo;d love to hear from you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependency Injection for Objective-C]]></title>
    <link href="http://steam.github.io/blog/2014/05/28/dependency-injection-for-objective-c/"/>
    <updated>2014-05-28T23:01:00-05:00</updated>
    <id>http://steam.github.io/blog/2014/05/28/dependency-injection-for-objective-c</id>
    <content type="html"><![CDATA[<p>Despite what some <a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">people</a> think, TDD is alive and well. Fast running tests are awesome and breaking dependencies is the key to fast, isolated unit tests. Reliable tests give us the confidence to aggressively clean our code and add new features.</p>

<p>In iOS and OS X it is common to use singleton or singleton style service objects for app wide functionality. Apple provides several of these singleton service objects that are used in most applications. <code>[NSUserDefaults standardUserDefaults];</code> and <code>[NSNotificationCenter defaultCenter];</code> for example.</p>

<p>Both <code>NSUserDefaults</code> and <code>NSNotificationCenter</code> are notoriously painful to isolate in unit tests. <code>NSUserDefaults</code> is challenging because it writes to disk and has the potential of poluting the real running application after the test suite has run and we are back to using the app in the simulator. <code>NSNotificationCenter</code> introduces the possibility of test pollution due to it&rsquo;s global nature. Wouldn&rsquo;t it be nice if we had a system to seemlessly inject fake versions of these in our tests?</p>

<p>We do.</p>

<p>At <a href="http://www.gospotcheck.com">GoSpotCheck</a> we have a mechanism for injecting all of Apple&rsquo;s as well as all of our own singleton style dependencies. When running in the simulator or on a device the real service objects are injected. When the test target is running fake service objects are injected.</p>

<p>The rest of this post will detail out our approach to dependency injection. To keep things easy to understand the example is intentionally simplistic. The sample project <a href="https://github.com/steam/injections">Injections</a> is not organized like our production application and the test suite is XCTest in order to reduce the amount of setup needed to try it out. We use <a href="https://github.com/pivotal/cedar">Cedar</a> and <a href="https://github.com/specta/expecta">Expecta</a> at GoSpotCheck.</p>

<p>The example below shows how to dependency inject a fake <code>AFNetworkReachabilityManager</code> from <a href="https://twitter.com/mattt">Mattt Thompson&rsquo;s</a> fantastic <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> library. AFNetworking is a great network request library for iOS and OS X.</p>

<p><code>AFNetworkReachabilityManager</code> provides hooks for checking on, and being notified of a device&rsquo;s internet connectivity. To unit test online/offline conditional behavior in an app we need to be able control (or fake) the <code>AFNetworkReachabilityManager's</code> reported connection status. This example may seem like a lot of code is required to fake the connection status. That using a mocking framework like <a href="http://ocmock.org/">OCMock</a> might be simpler. It would be. For one off stubbing and mocking OCMock is great. However, in a large production application fakes are usually a better choice in my opinion. Application state is more straightforward with a system of injected fakes than one off mocking, especially for system wide service objects. These techniques are especially useful when unit testing true service objects that make network requests and return deserialized model objects.</p>

<p>Injections is a simple application that displays the device&rsquo;s connection status when launched. Follow the setup below to see it in action.</p>

<p><img src="http://steam.github.io/images/injections.jpg"></p>

<h2>Setup</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:steam/injections.git
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>We&rsquo;ll be looking at a handful of classes and categories.</p>

<p><code>Environment</code> is the class that initializes all the services. In a real application you&rsquo;d see properties for a <code>NSNotificationCenter</code>, <code>NSUserDefaults</code> and all other singleton style service objects here. These will be referenced by the <code>UIViewController+Injections</code> category and made available to all <code>UIViewControllers</code> that want access.</p>

<figure class='code'><figcaption><span>Environment.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@class</span> <span class="nc">AFNetworkReachabilityManager</span>;
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Environment</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="n">AFNetworkReachabilityManager</span> <span class="o">*</span><span class="n">reachabilityManager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">Environment</span> <span class="o">*</span><span class="p">)</span><span class="nf">singleton</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isTestEnvironment</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The key part to take note of is <code>-initializeServices</code>. We call <code>[self isTestEnvironment]</code> to determine if we are in the test environment. If <code>- (BOOL)isTestEnvironment</code> returns true then we initialize fake services, otherwise we initialize the real <code>reachabilityManager</code>.</p>

<figure class='code'><figcaption><span>Environment.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">initializeServices</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">self</span> <span class="n">isTestEnvironment</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">performSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">initializeFakeServices</span><span class="p">)];</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">reachabilityManager</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFNetworkReachabilityManager</span> <span class="n">sharedManager</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">isTestEnvironment</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">initializeFakeServices</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The magic happens with <code>[self respondsToSelector:@selector(initializeFakeServices)]</code>. In the non-test target this will return false. In the test target it will return true because of the <code>Environment+Fake</code> category imported in <code>ViewControllerTests.m</code>.</p>

<figure class='code'><figcaption><span>Environment+Fake.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;Environment+Fake.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;FakeReachabilityManager.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Environment</span> <span class="nl">(Fake)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initializeFakeServices</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">setValue:</span><span class="p">[</span><span class="n">FakeReachabilityManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">forKey:</span><span class="s">@&quot;reachabilityManager&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Environment+Fake</code> sets <code>[FakeReachabilityManager sharedManager]</code> as the value for <code>self.reachabilityManager</code>. We&rsquo;ll see below that <code>ViewController</code> will use the fake version of <code>self.reachabilityManager</code> in the test target while using the real <code>reachabilityManager</code> in the non-test target.</p>

<p>The <code>UIViewController+Injections</code> category is in charge of defining methods that returns each of the services we want to expose to our view controllers. In this case <code>reachabilityManager</code> is returned from the <code>Environment</code> singleton object. This method will return either the real or fake version of the <code>reachabilityManager</code> depending on the target.</p>

<figure class='code'><figcaption><span>UIViewController+Injections.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@implementation</span> <span class="nc">UIViewController</span> <span class="nl">(Injections)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">AFNetworkReachabilityManager</span> <span class="o">*</span><span class="p">)</span><span class="nf">reachabilityManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">Environment</span> <span class="n">singleton</span><span class="p">].</span><span class="n">reachabilityManager</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ViewController</code> uses the <code>reachabilityManager</code> to determine what text to display to the user. If <code>self.reachabilityManger.networkReachabilityStatus</code> is reachable the label&rsquo;s text is set to &ldquo;online&rdquo;, if not then it is set to &ldquo;offline&rdquo;. Take note of the <code>@property (strong, nonatomic) AFNetworkReachabilityManager *reachabilityManager;</code> declaration in the header as well as it&rsquo;s corresponding <code>@dynamic reachabilityManager;</code> in the implementation file. All <code>UIViewController</code> subclasses have access to the <code>UIViewController+Injections</code> category methods which allows them to be set as properties on each <code>ViewController</code> subclass and dynamically evaluated at runtime.</p>

<figure class='code'><figcaption><span>ViewController.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@class</span> <span class="nc">AFNetworkReachabilityManager</span>;
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="nc">UIViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">internetStatusLabel</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* &quot;Injected&quot; properties -- Each should have a corresponding @dynamic directive */</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">AFNetworkReachabilityManager</span> <span class="o">*</span><span class="n">reachabilityManager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ViewController.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;AFNetworking/AFNetworkReachabilityManager.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@dynamic</span> <span class="n">reachabilityManager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">displayOnlineStatus</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">displayOnlineStatus</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">reachable</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">reachabilityManager</span><span class="p">.</span><span class="n">networkReachabilityStatus</span> <span class="o">!=</span> <span class="n">AFNetworkReachabilityStatusNotReachable</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">reachable</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">internetStatusLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;online&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">internetStatusLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;offline&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final two pieces of the puzzle are in our test suite. <code>ViewControllerTests.m</code> and <code>FakeReachabilityManager</code> take care of the rest.</p>

<p>First, <code>FakeReachabilityManager</code> provides access to toggling the reported connection status as online or offline.</p>

<figure class='code'><figcaption><span>FakeReachabilityManager.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;AFNetworkReachabilityManager.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">FakeReachabilityManager</span> : <span class="nc">AFNetworkReachabilityManager</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setOffline</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setOnline</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>By calling <code>-setOffline</code> or <code>-setOnline</code> we&rsquo;re able to override <code>- (AFNetworkReachabilityStatus)networkReachabilityStatus</code> having it return the value of <code>self.fakeStatus</code> set in the <code>-setOffline</code> or <code>-setOnline</code> calls.</p>

<figure class='code'><figcaption><span>FakeReachabilityManager.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">FakeReachabilityManager</span><span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">AFNetworkReachabilityStatus</span> <span class="n">fakeStatus</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">FakeReachabilityManager</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setOffline</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">fakeStatus</span> <span class="o">=</span> <span class="n">AFNetworkReachabilityStatusNotReachable</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setOnline</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">fakeStatus</span> <span class="o">=</span> <span class="n">AFNetworkReachabilityStatusReachableViaWWAN</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">AFNetworkReachabilityStatus</span><span class="p">)</span><span class="nf">networkReachabilityStatus</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">fakeStatus</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we make use of our <code>FakeReachabilityManager</code> in <code>ViewControllerTests.m</code>.</p>

<figure class='code'><figcaption><span>ViewControllerTests.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;XCTest/XCTest.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;Environment+Fake.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;FakeReachabilityManager.h&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewControllerTests</span> : <span class="nc">XCTestCase</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">ViewController</span> <span class="o">*</span><span class="n">controller</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewControllerTests</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setUp</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">setUp</span><span class="p">];</span>
</span><span class='line'>    <span class="n">UIStoryboard</span> <span class="o">*</span><span class="n">storyboard</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIStoryboard</span> <span class="nl">storyboardWithName:</span><span class="s">@&quot;Main&quot;</span> <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">controller</span> <span class="o">=</span> <span class="p">(</span><span class="n">ViewController</span> <span class="o">*</span><span class="p">)[</span><span class="n">storyboard</span> <span class="n">instantiateInitialViewController</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">controller</span> <span class="n">loadView</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tearDown</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">tearDown</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testOnlineLabelDisplaysOfflineWhenOffline</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">FakeReachabilityManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">(</span><span class="n">FakeReachabilityManager</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">controller</span><span class="p">.</span><span class="n">reachabilityManager</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">manager</span> <span class="n">setOffline</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">controller</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">expectedResult</span> <span class="o">=</span> <span class="s">@&quot;offline&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">text</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">controller</span><span class="p">.</span><span class="n">internetStatusLabel</span><span class="p">.</span><span class="n">text</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XCTAssertTrue</span><span class="p">([</span><span class="n">text</span> <span class="nl">isEqualToString:</span><span class="n">expectedResult</span><span class="p">],</span> <span class="s">@&quot;Strings are not equal %@ %@&quot;</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">expectedResult</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testOnlineLabelDisplaysOnlineWhenOnline</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">FakeReachabilityManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">(</span><span class="n">FakeReachabilityManager</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">controller</span><span class="p">.</span><span class="n">reachabilityManager</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">manager</span> <span class="n">setOnline</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">controller</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">expectedResult</span> <span class="o">=</span> <span class="s">@&quot;online&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">text</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">controller</span><span class="p">.</span><span class="n">internetStatusLabel</span><span class="p">.</span><span class="n">text</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XCTAssertTrue</span><span class="p">([</span><span class="n">text</span> <span class="nl">isEqualToString:</span><span class="n">expectedResult</span><span class="p">],</span> <span class="s">@&quot;Strings are not equal %@ %@&quot;</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">expectedResult</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>By toggling our <code>reachabilityManager's</code> online status through the fake we are able to write assertions about the label&rsquo;s text for both online and offline states.</p>

<h2>Summary</h2>

<ul>
<li><code>Environment</code> handles the setup of service objects.</li>
<li><code>Environment+Fake</code> sets fake services in the test target.</li>
<li><code>UIViewController+Injections</code> provides service access to <code>UIViewControllers</code>.</li>
<li><code>@dynamic</code> accessors makes this possible.</li>
<li><code>ViewControllerTests.m</code> is able to use the fake service object and control the external dependency.</li>
</ul>


<p>As I mentioned above, this example feels like overkill for this particular use case due to the simplicity of the app. In practice however this technique makes it possible to have fine grain control over a host of complicated services and objects. When your app has hundreds of classes and thousands of tests you&rsquo;ll see your hard work paid back many times over. The tests will run fast and predictably (our current test suite takes under 15 seconds to run ~1400 tests). TDD and near complete test coverage can only happen when you have confidence in the test suite and you can execute them fast enough to do it often. Breaking dependencies on asynchronous code and hard to control state is crucial.</p>

<p>Approach this in a different way? Completely disagree? Love the technique? Reach out and let me know on twitter <a href="https://twitter.com/sdougherty">@sdougherty</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android vs iOS From an iOS Developer's Perspective]]></title>
    <link href="http://steam.github.io/blog/2014/05/17/android-vs-ios-from-an-ios-developers-perspective/"/>
    <updated>2014-05-17T15:48:00-05:00</updated>
    <id>http://steam.github.io/blog/2014/05/17/android-vs-ios-from-an-ios-developers-perspective</id>
    <content type="html"><![CDATA[<p>Over the last month or so I&rsquo;ve been spending my days learning Java and Android development. As an iPhone user I find myself trying to make sense of Android apps through the lens of years of iPhone use. I realized that I needed to be a real Android user. Much to the dismay of most people who know me I visited the Google Play store and bought a Nexus 5. After receiving the Nexus I went to AT&amp;T to get a micro-SIM and I made the switch.</p>

<h3>Observations</h3>

<p>The first surprise was the price. Unlocked, no contract, no carrier commitment: $350. The last time I purchased an unlocked iPhone it set me back $950. Why are Android devices so inexpensive?</p>

<p>The second surprise was the quality of the software experience. I&rsquo;ve had various Android devices over the years for testing purposes but they all seemed cheap and clunky. The Nexus 5 runs vanilla KitKat and it is years beyond older versions in every way. I liked the lack of manufacturer kludge as well. My Samsung Galaxy S2 testing phone was highly customized by Samsung and felt clunky. Vanilla KitKat comes close to matching iOS 7&rsquo;s finish in many areas and <gasp> surpasses it in many others. Gone are the days of Android trailing far behind iOS in functionality and experience. KitKat is polished and mature feeling.</p>

<p>Most of the apps I use on a daily basis, Spotify, Twitter, Facebook, Circa, Pocket, Fliboard, Zite and NPR News are all first class citizens on Android. Aside from a hellish logging-in-to-all-the-things experience my digital life ported over nicely. The Gmail app worked great. Hangouts was mildly confusing but ultimately worked well for texts and instant messaging. The experience also gave me the excuse to move my wife&rsquo;s calendar and my calendar from iCloud over to Google Calendar. Since we both use Gmail it was something I&rsquo;d been meaning to do for awhile.</p>

<h3>Love</h3>

<p>The best feature of Android is the back button. Navigating between apps is seamless. Its hard to explain this feature to an iPhone user. It doesn&rsquo;t sound that sexy but oh man, it is sexy. The flow of jumping from one app to another and tapping back to jump between apps is such a better flow than the iPhone&rsquo;s app switching. It just feels more natural and useful.</p>

<p>Another feature of the Nexus that I loved was the screen size. At just under 5&#8221; the screen is big and beautiful. The full 1080p screen has room for much more content then an iPhone 5s. I hope the rumors are true about larger iPhones coming this fall.</p>

<p>Google clearly excels at cloud services. The thoroughness and reliability of their offering is impressive. Their services cover almost all possible needs and are available everywhere. The portability of using Google&rsquo;s services over Apple&rsquo;s gated ecosystem is attractive. Gmail, Google Drive and Hangouts are as reliable as anything else out there and considerably more reliable than Apple&rsquo;s several attempts at cloud based services.</p>

<p>Google Now was a nice surprise. It is integrated directly into the OS and is incredibly useful. Being able to configure Google Now along with it&rsquo;s learned behavior made my experience with the device personal and contextual.</p>

<p>Android has the concept of widgets, small subsets of an app&rsquo;s features that are installable on the phone&rsquo;s home screens. The two widgets I actually used displayed the current weather and another that launched a specific Dropbox folder. Due to a great architectural decision in Android it is possible to deep link into apps all the time. Deep linking is a must have feature for future version&rsquo;s of iOS. The productivity gains from going directly to the area of an app you need are huge.</p>

<h3>Hate</h3>

<p>While the Android Apps I used had come a long way since they were first introduced some aspects of the experience felt less refined than on iOS. For example, the lack of rubber banding on scrolling lists felt off and unnatural.</p>

<p>The first pain point came when I stopped receiving &ldquo;texts&rdquo; from all my iPhone friends. These were of course iMessages and Apple&rsquo;s servers failed to release my phone number and start sending standard sms texts instead of iMessage. While not a problem caused by Android this drove me insane. I have several Apple products connected to iMessage; my mac book pro, multiple iPads and my iPhone 5s. Turning off iMessage for my phone number did not fix the problem. Apparently I am not the only one who has had to deal with this: <a href="http://adampash.com/imessage-purgatory/">iMessage purgatory</a>.</p>

<p>After the whole text/iMessage fiasco (Apple&rsquo;s fault for sure) the next biggest challenge was visual voicemail. AT&amp;T has an Android App for visual voicemail. Despite a good hour of trying and another hour on the phone with AT&amp;T I never got visual voicemail working. Its amazing how fast certain features become expected. Using a smartphone to call and retreive my voicemails felt antiquated and frustrating. Android users have since told me that Google Voice is the best app to use for visual voicemail. I never tried it unfortunately.</p>

<h3>Conclusion</h3>

<p>I found the entire experience to be less cohesive than iOS. I&rsquo;m not sure if the problem is too much choice or if it is just a maturity issue but I didn&rsquo;t open the box, turn it on and have a smooth, working smart phone. The experience was impressive and the phone was beautiful but somehow the combination of all the parts did not add up to something greater than the whole. Apple consistently nails this.</p>

<p>How long did I use the Nexus 5 as my primary phone? 5 days. I&rsquo;m back on the iPhone and I don&rsquo;t miss the Nexus much. I am glad for the experience though. When I work in Android now I have a much clearer idea of what users expect. iOS users and Android users should and do expect a different experience. The interaction is different so our applications should match those expected interactions. Google has done some amazing work in a very short amount of time. Apple has some work to do if they&rsquo;re going to remain competitive with Android.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Data Security]]></title>
    <link href="http://steam.github.io/blog/2013/05/22/ios-data-security/"/>
    <updated>2013-05-22T13:56:00-05:00</updated>
    <id>http://steam.github.io/blog/2013/05/22/ios-data-security</id>
    <content type="html"><![CDATA[<p>On a recent client project we had the need to research the encryption/security features available to iOS applications. This is a modified write-up of our findings. Special thanks to Jay Zeschin <a href="https://twitter.com/jayzes">@jayzes</a> at <a href="http://modeset.com/">Mode Set</a> for editing the original draft I wrote.</p>

<p>There are several layers of security that affect a user’s data when using an iOS app &ndash; security at rest on the server, security in transit over the network, and security on the iOS device. Focusing on the iOS device only for now, there are several scenarios that are of primary concern: while a user is actively using the app, while a user not actively using the app, when data is stored on disk, and when data is present in memory (RAM). In addition, there are security concerns inherent in ancillary processes such as backing up a device (via iTunes or iCloud) or migrating data to separate devices (e.g. when a user gets a new phone).</p>

<p>While it is impossible to protect user data 100% in all scenarios, there are a number of options available that provide increasing levels of security and protection. Each additional measure of security has advantages and drawbacks, and comes with some measure of added time and effort during the development process.</p>

<h3>1. Built-in Data Protection</h3>

<p>Starting with iOS 4, Apple added operating-system level data security provisions and made them available to app developers. In short, if an app developer chooses to make use of these protections and an app user enables a passcode on their device, all data stored to the device by that app is transparently encrypted and protected from unauthorized access by anyone (including the user) when the device is locked, protecting it while at rest. Technically, this is implemented with a tiered system of encrypted keys called keybags, the last of which is based directly off the user’s passcode. When the passcode is entered and the phone is unlocked, all application data is available and unencrypted.</p>

<p>This built-in protection scheme is what Apple makes use of internally for their own apps (such as Mail). It’s a great option and requires very little development time to integrate, so we strongly recommend using it. Any strategy we choose should, at minimum, include this security measure.</p>

<h4>Pros:</h4>

<ul>
<li>Hardware-keyed and transparent encryption of user data</li>
<li>Follows industry standard practices</li>
<li>Integrated at the operating-system level</li>
<li>Architected, developed and supported by Apple</li>
</ul>


<h4>Cons:</h4>

<ul>
<li>Requires the user to have a passcode enabled on their device to offer any sort of data protection value</li>
<li>Apps are unable to programmatically ascertain whether a user has enabled a device passcode (a relatively recent change), which prevents apps from being able to prompt users or limit functionality to guarantee that data is protected. See more about this in the “Recommendations” section below.</li>
</ul>


<h3>2. Adding a Second Level of Protection</h3>

<p>The two cons of built-in data protection are significant limitations, and due to the low level integration of those built-in protections into the operating system, it is difficult if not impossible to augment them directly. For that reason, it is often necessary to implement additional protection of sensitive data at a higher level. Several industry tested code libraries exist for this purpose, most notably <a href="http://sqlcipher.net/">SQLCipher</a>. These libraries encrypt the data contained in the database files before they are written to disk, in contrast to Apple’s approach of encrypting the file itself.</p>

<h4>Pros:</h4>

<ul>
<li>Offers additional protection on top of Apple’s basic security</li>
<li>Data is encrypted and secure even when the device does not have a passcode</li>
<li>Ability to customize/control protection and related user interactions within the app</li>
</ul>


<h4>Cons:</h4>

<ul>
<li>Time consuming to implement, requiring structural changes to the existing data model</li>
<li>Requires introducing a strategy for encryption key management</li>
<li>Introduces an overhead for management/maintenance on future feature work</li>
</ul>


<h3>3. Removing Sensitive Data From Memory</h3>

<p>When data is actively in-use by an application it is stored in RAM, a volatile physical location on the device. Depending on the specific use case, some kinds of data are created, accessed, and destroyed all solely in RAM. Other data (downloaded images or data from a local database, for example) is read from disk and stored in RAM. Data stored in this way is necessarily unencrypted and inherently temporary &ndash; it is created by the device as needed and discarded when the app is no longer running. However, the way that Apple has architected iOS means that applications may continue to run and be resident in memory when they are in the background, sometimes for days or weeks on end. While it would take a much more concentrated hacking effort, it is technically possible to access data belonging to a running app from memory. Securing this data requires purging all sensitive data from memory when a screen is hidden or the application goes into the background &ndash; a process that involves a very careful line-by-line audit of an app and how data is created and stored.</p>

<h4>Pros:</h4>

<ul>
<li>Combined with the previous steps, this is the most secure form of data protection</li>
<li>It is much more difficult to exploit a running application with this level of protection</li>
</ul>


<h4>Cons:</h4>

<ul>
<li>Extremely time consuming to implement</li>
<li>Requires close scrutiny of every line of code in the app</li>
</ul>

]]></content>
  </entry>
  
</feed>
